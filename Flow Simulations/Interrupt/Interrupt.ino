float curve[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.012564,0.037681,0.075324,0.12546,0.18803,0.26298,0.35024,0.44972,0.56131,0.68492,0.82042,0.96766,1.1265,1.2968,1.4784,1.6711,1.8748,2.0891,2.3139,2.549,2.7942,3.0492,3.3137,3.5875,3.8703,4.1619,4.462,4.7702,5.0862,5.4099,5.7407,6.0784,6.4227,6.7732,7.1296,7.4916,7.8587,8.2306,8.6069,8.9874,9.3715,9.7589,10.149,10.542,10.937,11.334,11.732,12.132,12.531,12.931,13.319,13.693,14.053,14.4,14.732,15.05,15.354,15.642,15.914,16.171,16.412,16.636,16.845,17.036,17.211,17.369,17.51,17.633,17.739,17.827,17.898,17.952,17.987,18.005,18.005,17.987,17.952,17.898,17.827,17.739,17.633,17.51,17.369,17.211,17.036,16.845,16.636,16.412,16.171,15.914,15.642,15.354,15.05,14.732,14.4,14.053,13.693,13.319,12.931,12.531,12.132,11.732,11.334,10.937,10.542,10.149,9.7589,9.3715,8.9874,8.6069,8.2306,7.8587,7.4916,7.1296,6.7732,6.4227,6.0784,5.7407,5.4099,5.0862,4.7702,4.462,4.1619,3.8703,3.5875,3.3137,3.0492,2.7942,2.549,2.3139,2.0891,1.8748,1.6711,1.4784,1.2968,1.1265,0.96766,0.82042,0.68492,0.56131,0.44972,0.35024,0.26298,0.18803,0.12546,0.075324,0.037681,0.012564,1.2593e-16,7.7856e-17,7.6315e-17,7.3924e-17,7.1581e-17,6.9284e-17,6.7033e-17,6.4826e-17,6.2663e-17,6.0542e-17,5.8464e-17,5.6427e-17,5.443e-17,5.2473e-17,5.0555e-17,4.8674e-17,4.6831e-17,4.5024e-17,4.3253e-17,4.1517e-17,3.9816e-17,3.8148e-17,3.6513e-17,3.4911e-17,3.334e-17,3.18e-17,3.0291e-17,2.8812e-17,2.7362e-17,2.5941e-17,2.4548e-17,2.3182e-17,2.1844e-17,2.0532e-17,1.9246e-17,1.7985e-17,1.6749e-17,1.5538e-17,1.4351e-17,1.3188e-17,1.2047e-17,1.0929e-17,9.8332e-18,8.7591e-18,7.7062e-18,6.6742e-18,5.6626e-18,4.671e-18,3.6991e-18,2.7464e-18,1.8125e-18,8.9721e-19,0,0,0.013821,0.041449,0.082856,0.138,0.20683,0.28928,0.38526,0.49469,0.61744,0.75341,0.90246,1.0644,1.2392,1.4265,1.6263,1.8382,2.0622,2.298,2.5453,2.8039,3.0736,3.3541,3.6451,3.9463,4.2574,4.5781,4.9082,5.2472,5.5949,5.9508,6.3148,6.6863,7.065,7.4506,7.8426,8.2407,8.6445,9.0536,9.4676,9.8861,10.309,10.735,11.164,11.596,12.031,12.468,12.906,13.345,13.784,14.224,14.65,15.062,15.459,15.84,16.206,16.555,16.889,17.206,17.505,17.788,18.053,18.3,18.529,18.74,18.932,19.106,19.26,19.396,19.513,19.61,19.688,19.747,19.786,19.805,19.805,19.786,19.747,19.688,19.61,19.513,19.396,19.26,19.106,18.932,18.74,18.529,18.3,18.053,17.788,17.505,17.206,16.889,16.555,16.206,15.84,15.459,15.062,14.65,14.224,13.784,13.345,12.906,12.468,12.031,11.596,11.164,10.735,10.309,9.8861,9.4676,9.0536,8.6445,8.2407,7.8426,7.4506,7.065,6.6863,6.3148,5.9508,5.5949,5.2472,4.9082,4.5781,4.2574,3.9463,3.6451,3.3541,3.0736,2.8039,2.5453,2.298,2.0622,1.8382,1.6263,1.4265,1.2392,1.0644,0.90246,0.75341,0.61744,0.49469,0.38526,0.28928,0.20683,0.138,0.082856,0.041449,0.013821,1.3852e-16,8.5642e-17,8.3946e-17,8.1316e-17,7.8739e-17,7.6212e-17,7.3736e-17,7.1308e-17,6.8929e-17,6.6597e-17,6.4311e-17,6.207e-17,5.9873e-17,5.772e-17,5.561e-17,5.3541e-17,5.1514e-17,4.9526e-17,4.7578e-17,4.5669e-17,4.3797e-17,4.1963e-17,4.0164e-17,3.8402e-17,3.6674e-17,3.498e-17,3.332e-17,3.1693e-17,3.0098e-17,2.8535e-17,2.7002e-17,2.55e-17,2.4028e-17,2.2585e-17,2.117e-17,1.9784e-17,1.8424e-17,1.7092e-17,1.5786e-17,1.4506e-17,1.3252e-17,1.2022e-17,1.0817e-17,9.635e-18,8.4768e-18,7.3416e-18,6.2288e-18,5.1381e-18,4.069e-18,3.021e-18,1.9938e-18,9.8693e-19,0,0,0.011308,0.033912,0.067791,0.11291,0.16923,0.23669,0.31522,0.40475,0.50518,0.61643,0.73837,0.8709,1.0139,1.1672,1.3306,1.504,1.6873,1.8802,2.0825,2.2941,2.5148,2.7442,2.9823,3.2288,3.4833,3.7457,4.0158,4.2932,4.5776,4.8689,5.1666,5.4706,5.7804,6.0959,6.4167,6.7424,7.0728,7.4075,7.7462,8.0886,8.4343,8.783,9.1343,9.488,9.8435,10.201,10.559,10.918,11.278,11.638,11.987,12.323,12.648,12.96,13.259,13.545,13.818,14.077,14.323,14.554,14.771,14.973,15.16,15.333,15.49,15.632,15.759,15.87,15.965,16.045,16.108,16.156,16.188,16.204,16.204,16.188,16.156,16.108,16.045,15.965,15.87,15.759,15.632,15.49,15.333,15.16,14.973,14.771,14.554,14.323,14.077,13.818,13.545,13.259,12.96,12.648,12.323,11.987,11.638,11.278,10.918,10.559,10.201,9.8435,9.488,9.1343,8.783,8.4343,8.0886,7.7462,7.4075,7.0728,6.7424,6.4167,6.0959,5.7804,5.4706,5.1666,4.8689,4.5776,4.2932,4.0158,3.7457,3.4833,3.2288,2.9823,2.7442,2.5148,2.2941,2.0825,1.8802,1.6873,1.504,1.3306,1.1672,1.0139,0.8709,0.73837,0.61643,0.50518,0.40475,0.31522,0.23669,0.16923,0.11291,0.067791,0.033912,0.011308,1.2872e-16,8.5642e-17,8.3946e-17};
int red = 3;
int blue = 2;
int buttonPin = 12;
int buttonState = 0;
int prevButtonState = 0;
int outPin = 10;
int outputVals[sizeof(curve)*sizeof(int)/sizeof(float)];

//float inputVals[] = Bell1;
//float outputVals[sizeof(Bell1[])];

void pinSetup(){
  analogWriteResolution(12);
  Serial.begin(9600);
  Serial.println(sizeof(curve)/sizeof(float));
  //Serial.println(sizeof(int));
  //Serial.println(sizeof(float));
  pinMode(red, OUTPUT);
  pinMode(blue, OUTPUT);
  pinMode(outPin, OUTPUT);
  pinMode(buttonPin, INPUT);
  pinMode(13, OUTPUT);
}

int flowToVolt(float flow){
  float out;
  out = 98.11*flow+1733.5;
  out = int(out);
  return out;
}

void setup() {
  pinSetup();
  //analogWriteFrequency(20, 490);
   // analogWriteResolution(12);
  
  for (int i = 0; i < sizeof(curve)/sizeof(float); i++){
    outputVals[i] = flowToVolt(curve[i]);
  }

  digitalWrite(blue, HIGH);
      digitalWrite(13, HIGH);
}

void loop() {
  buttonState = digitalRead(buttonPin);
  if (buttonState == 0 && prevButtonState == 1){
    digitalWrite(blue, LOW);
    digitalWrite(red, HIGH);
    //Serial.println(sizeof(outputVals)/(4*sizeof(int)));
    
    for (int i = 0; i < sizeof(curve)/(sizeof(int)); i++){
      analogWrite(outPin, outputVals[i]);
      Serial.println(outputVals[i]);
      delay(50);
    }
    digitalWrite(red, LOW); 
    digitalWrite(blue, HIGH);
    analogWrite(outPin, 0);  
  }
  
  prevButtonState = buttonState;


}
